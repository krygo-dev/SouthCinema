// Mocks generated by Mockito 5.4.0 from annotations
// in south_cinema/test/features/user_profile/presentation/bloc/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:south_cinema/core/error/error.dart' as _i6;
import 'package:south_cinema/features/user_profile/domain/entities/user.dart'
    as _i7;
import 'package:south_cinema/features/user_profile/domain/repositories/user_profile_repository.dart'
    as _i2;
import 'package:south_cinema/features/user_profile/domain/usecases/get_user_by_id.dart'
    as _i4;
import 'package:south_cinema/features/user_profile/domain/usecases/set_or_update_user_data.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserProfileRepository_0 extends _i1.SmartFake
    implements _i2.UserProfileRepository {
  _FakeUserProfileRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserById extends _i1.Mock implements _i4.GetUserById {
  MockGetUserById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserProfileRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserProfileRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserProfileRepository);
  @override
  _i5.Future<_i3.Either<_i6.BaseError, _i7.User>> call(
          {required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#uid: uid},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.BaseError, _i7.User>>.value(
            _FakeEither_1<_i6.BaseError, _i7.User>(
          this,
          Invocation.method(
            #call,
            [],
            {#uid: uid},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.BaseError, _i7.User>>);
}

/// A class which mocks [SetOrUpdateUserData].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetOrUpdateUserData extends _i1.Mock
    implements _i8.SetOrUpdateUserData {
  MockSetOrUpdateUserData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserProfileRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserProfileRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserProfileRepository);
  @override
  _i5.Future<_i3.Either<_i6.BaseError, bool>> call({required _i7.User? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#user: user},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.BaseError, bool>>.value(
            _FakeEither_1<_i6.BaseError, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#user: user},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.BaseError, bool>>);
}
