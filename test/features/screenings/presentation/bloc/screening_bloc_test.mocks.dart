// Mocks generated by Mockito 5.3.2 from annotations
// in south_cinema/test/features/screenings/presentation/bloc/screening_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:south_cinema/core/error/error.dart' as _i6;
import 'package:south_cinema/features/screenings/domain/entities/room.dart'
    as _i9;
import 'package:south_cinema/features/screenings/domain/entities/screening.dart'
    as _i7;
import 'package:south_cinema/features/screenings/domain/repositories/screenings_repository.dart'
    as _i2;
import 'package:south_cinema/features/screenings/domain/usecases/get_room_by_id.dart'
    as _i8;
import 'package:south_cinema/features/screenings/domain/usecases/get_screening_by_id.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScreeningsRepository_0 extends _i1.SmartFake
    implements _i2.ScreeningsRepository {
  _FakeScreeningsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetScreeningById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetScreeningById extends _i1.Mock implements _i4.GetScreeningById {
  MockGetScreeningById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScreeningsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeScreeningsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ScreeningsRepository);
  @override
  _i5.Future<_i3.Either<_i6.BaseError, _i7.Screening>> call(
          {required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.BaseError, _i7.Screening>>.value(
            _FakeEither_1<_i6.BaseError, _i7.Screening>(
          this,
          Invocation.method(
            #call,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.BaseError, _i7.Screening>>);
}

/// A class which mocks [GetRoomById].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRoomById extends _i1.Mock implements _i8.GetRoomById {
  MockGetRoomById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ScreeningsRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeScreeningsRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ScreeningsRepository);
  @override
  _i5.Future<_i3.Either<_i6.BaseError, _i9.Room>> call({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.BaseError, _i9.Room>>.value(
            _FakeEither_1<_i6.BaseError, _i9.Room>(
          this,
          Invocation.method(
            #call,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.BaseError, _i9.Room>>);
}
