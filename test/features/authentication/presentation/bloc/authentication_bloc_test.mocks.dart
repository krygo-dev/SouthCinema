// Mocks generated by Mockito 5.4.0 from annotations
// in south_cinema/test/features/authentication/presentation/bloc/authentication_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:south_cinema/core/error/error.dart' as _i7;
import 'package:south_cinema/features/authentication/domain/entities/auth_user.dart'
    as _i8;
import 'package:south_cinema/features/authentication/domain/repositories/authentication_repository.dart'
    as _i2;
import 'package:south_cinema/features/authentication/domain/usecases/get_current_user.dart'
    as _i4;
import 'package:south_cinema/features/authentication/domain/usecases/sign_in_with_email_and_password.dart'
    as _i5;
import 'package:south_cinema/features/authentication/domain/usecases/sign_out.dart'
    as _i10;
import 'package:south_cinema/features/authentication/domain/usecases/sign_up_with_email_and_password.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthenticationRepository_0 extends _i1.SmartFake
    implements _i2.AuthenticationRepository {
  _FakeAuthenticationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCurrentUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentUser extends _i1.Mock implements _i4.GetCurrentUser {
  MockGetCurrentUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthenticationRepository);
}

/// A class which mocks [SignInWithEmailAndPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithEmailAndPassword extends _i1.Mock
    implements _i5.SignInWithEmailAndPassword {
  MockSignInWithEmailAndPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>> call({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>>.value(
            _FakeEither_1<_i7.BaseError, _i8.AuthUser>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>>);
}

/// A class which mocks [SignUpWithEmailAndPassword].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpWithEmailAndPassword extends _i1.Mock
    implements _i9.SignUpWithEmailAndPassword {
  MockSignUpWithEmailAndPassword() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>> call({
    required String? email,
    required String? password,
    required String? repeatPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #email: email,
            #password: password,
            #repeatPassword: repeatPassword,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>>.value(
            _FakeEither_1<_i7.BaseError, _i8.AuthUser>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #email: email,
              #password: password,
              #repeatPassword: repeatPassword,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.BaseError, _i8.AuthUser>>);
}

/// A class which mocks [SignOut].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOut extends _i1.Mock implements _i10.SignOut {
  MockSignOut() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AuthenticationRepository);
  @override
  _i6.Future<_i3.Either<_i7.BaseError, void>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.BaseError, void>>.value(
            _FakeEither_1<_i7.BaseError, void>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.BaseError, void>>);
}
